// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package kthrift

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type Status int64

const (
	Status_NOT_CONFIGURED Status = 0
	Status_QUIESCENT      Status = 1
	Status_READ_ONLY      Status = 2
	Status_UP             Status = 3
)

func (p Status) String() string {
	switch p {
	case Status_NOT_CONFIGURED:
		return "Status_NOT_CONFIGURED"
	case Status_QUIESCENT:
		return "Status_QUIESCENT"
	case Status_READ_ONLY:
		return "Status_READ_ONLY"
	case Status_UP:
		return "Status_UP"
	}
	return "<UNSET>"
}

func StatusFromString(s string) (Status, error) {
	switch s {
	case "Status_NOT_CONFIGURED":
		return Status_NOT_CONFIGURED, nil
	case "Status_QUIESCENT":
		return Status_QUIESCENT, nil
	case "Status_READ_ONLY":
		return Status_READ_ONLY, nil
	case "Status_UP":
		return Status_UP, nil
	}
	return Status(math.MinInt32 - 1), fmt.Errorf("not a valid Status string")
}

type Item struct {
	Data []byte `thrift:"data,1"`
	Id   int64  `thrift:"id,2"`
}

func NewItem() *Item {
	return &Item{}
}

func (p *Item) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Item) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Data = v
	}
	return nil
}

func (p *Item) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Item) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Item"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Item) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Data != nil {
		if err := oprot.WriteFieldBegin("data", thrift.BINARY, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:data: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Data); err != nil {
			return fmt.Errorf("%T.data (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:data: %s", p, err)
		}
	}
	return err
}

func (p *Item) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Id)); err != nil {
		return fmt.Errorf("%T.id (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:id: %s", p, err)
	}
	return err
}

func (p *Item) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Item(%+v)", *p)
}

type QueueInfo struct {
	HeadItem         []byte `thrift:"head_item,1"`
	Items            int64  `thrift:"items,2"`
	Bytes            int64  `thrift:"bytes,3"`
	JournalBytes     int64  `thrift:"journal_bytes,4"`
	Age              int64  `thrift:"age,5"`
	Waiters          int32  `thrift:"waiters,6"`
	OpenTransactions int32  `thrift:"open_transactions,7"`
}

func NewQueueInfo() *QueueInfo {
	return &QueueInfo{}
}

func (p *QueueInfo) IsSetHeadItem() bool {
	return p.HeadItem != nil
}

func (p *QueueInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueueInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.HeadItem = v
	}
	return nil
}

func (p *QueueInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Items = v
	}
	return nil
}

func (p *QueueInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Bytes = v
	}
	return nil
}

func (p *QueueInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.JournalBytes = v
	}
	return nil
}

func (p *QueueInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Age = v
	}
	return nil
}

func (p *QueueInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Waiters = v
	}
	return nil
}

func (p *QueueInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.OpenTransactions = v
	}
	return nil
}

func (p *QueueInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueueInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *QueueInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.HeadItem != nil {
		if p.IsSetHeadItem() {
			if err := oprot.WriteFieldBegin("head_item", thrift.BINARY, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:head_item: %s", p, err)
			}
			if err := oprot.WriteBinary(p.HeadItem); err != nil {
				return fmt.Errorf("%T.head_item (1) field write error: %s", p)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:head_item: %s", p, err)
			}
		}
	}
	return err
}

func (p *QueueInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("items", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:items: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Items)); err != nil {
		return fmt.Errorf("%T.items (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:items: %s", p, err)
	}
	return err
}

func (p *QueueInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bytes", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:bytes: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Bytes)); err != nil {
		return fmt.Errorf("%T.bytes (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:bytes: %s", p, err)
	}
	return err
}

func (p *QueueInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("journal_bytes", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:journal_bytes: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.JournalBytes)); err != nil {
		return fmt.Errorf("%T.journal_bytes (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:journal_bytes: %s", p, err)
	}
	return err
}

func (p *QueueInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("age", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:age: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Age)); err != nil {
		return fmt.Errorf("%T.age (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:age: %s", p, err)
	}
	return err
}

func (p *QueueInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("waiters", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:waiters: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Waiters)); err != nil {
		return fmt.Errorf("%T.waiters (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:waiters: %s", p, err)
	}
	return err
}

func (p *QueueInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("open_transactions", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:open_transactions: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.OpenTransactions)); err != nil {
		return fmt.Errorf("%T.open_transactions (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:open_transactions: %s", p, err)
	}
	return err
}

func (p *QueueInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueueInfo(%+v)", *p)
}
